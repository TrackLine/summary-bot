import asyncio
import os
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.enums import ChatType
from aiogram.types import Message
from dotenv import load_dotenv
from storage import MessageStorage
from summarizer import summarize_threads
from datetime import datetime, timedelta, timezone
from aiogram.exceptions import TelegramBadRequest

# --- –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
)
logger = logging.getLogger(__name__)

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SUMMARY_INTERVAL_MINUTES = int(os.getenv("SUMMARY_INTERVAL_MINUTES", 60))

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
storage = MessageStorage()

async def check_admin(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞"""
    try:
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.status in ("administrator", "creator")
    except TelegramBadRequest as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}: {e}")
        return False

logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

# --- –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö –∏ —Ç–æ–ø–∏–∫–∞—Ö.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã (–¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞):\n"
        "/set_summary_topic - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ø–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∞–º–º–∞—Ä–∏\n"
        "/set_interval - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∞–º–º–∞—Ä–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)\n"
        "/summary_on - –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–∞—Ä–∏\n"
        "/summary_off - –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∞–º–º–∞—Ä–∏\n"
        "/summary_now - —Å–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Å–µ–π—á–∞—Å"
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")

# --- –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message(~Command("start", "set_summary_topic", "set_interval", "summary_on", "summary_off", "summary_now"))
async def collect_messages(message: Message):
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP, ChatType.PRIVATE]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.text:
            thread_id = message.message_thread_id or 0
            msg_date = message.date
            if msg_date.tzinfo is None:
                msg_date = msg_date.replace(tzinfo=timezone.utc)
            else:
                msg_date = msg_date.astimezone(timezone.utc)
            await storage.save_message(
                chat_id=message.chat.id,
                thread_id=thread_id,
                user=message.from_user.full_name,
                text=message.text,
                date=msg_date
            )
            logger.info(f"–°–æ–±—Ä–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id} (—Ç–æ–ø–∏–∫ {thread_id}): {message.from_user.full_name}")
    return

@dp.message(Command("select_topics", ignore_mention=True))
async def select_topics(message: Message):
    chat_id = message.chat.id
    threads = await storage.get_threads(chat_id)
    buttons = []
    chat = await bot.get_chat(chat_id)
    for thread_id in threads:
        if thread_id == 0:
            btn_text = "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
        else:
            try:
                topic = await bot.get_forum_topic(chat_id, thread_id)
                btn_text = getattr(topic, "name", f"–¢–æ–ø–∏–∫ {thread_id}")
            except Exception:
                btn_text = f"–¢–æ–ø–∏–∫ {thread_id}"
        buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"select_topic:{thread_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("select_topic:"))
async def handle_select_topic(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    member = await bot.get_chat_member(chat_id, user_id)
    if member.status not in ("administrator", "creator"):
        await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)
        return
    thread_id = int(callback.data.split(":")[1])
    await storage.set_selected_topic(chat_id, thread_id)
    await callback.answer(f"–¢–æ–ø–∏–∫ {thread_id} –≤—ã–±—Ä–∞–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
@dp.message(Command("set_summary_topic", ignore_mention=True))
async def set_summary_topic(message: Message, command: CommandObject):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(message):
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return
    chat_id = message.chat.id
    threads = await storage.get_threads(chat_id)
    buttons = []
    chat = await bot.get_chat(chat_id)
    for thread_id in threads:
        if thread_id == 0:
            btn_text = "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
        else:
            try:
                topic = await bot.get_forum_topic(chat_id, thread_id)
                btn_text = getattr(topic, "name", f"–¢–æ–ø–∏–∫ {thread_id}")
            except Exception:
                btn_text = f"–¢–æ–ø–∏–∫ {thread_id}"
        buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"set_summary_topic:{thread_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–∏–∫ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("set_summary_topic:"))
async def handle_set_summary_topic(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    member = await bot.get_chat_member(chat_id, user_id)
    if member.status not in ("administrator", "creator"):
        await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!", show_alert=True)
        return
    topic_id = int(callback.data.split(":")[1])
    await storage.set_summary_topic(chat_id, topic_id)
    await callback.answer(f"–¢–æ–ø–∏–∫ {topic_id} –≤—ã–±—Ä–∞–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–∞–º–º–∞—Ä–∏!")

@dp.message(Command("set_interval", ignore_mention=True))
async def set_interval(message: Message, command: CommandObject):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(message):
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return
        
    if not command.args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö. –ü—Ä–∏–º–µ—Ä: /set_interval 60")
        return
    try:
        interval = int(command.args.strip())
        await storage.set_summary_interval(message.chat.id, interval)
        await message.reply(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∞–º–º–∞—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} –º–∏–Ω—É—Ç")
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–∞–º–º–∞—Ä–∏ –≤ —á–∞—Ç–µ {message.chat.id}: {interval} –º–∏–Ω—É—Ç (thread_id={message.message_thread_id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª. –ü—Ä–∏–º–µ—Ä: /set_interval 60")

@dp.message(Command("summary_on", ignore_mention=True))
async def summary_on(message: Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(message):
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return
        
    await storage.set_summary_enabled(message.chat.id, True)
    await message.reply("–°–∞–º–º–∞—Ä–∏ –≤–∫–ª—é—á–µ–Ω–æ.")
    logger.info(f"–°–∞–º–º–∞—Ä–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ —á–∞—Ç–µ {message.chat.id} (thread_id={message.message_thread_id})")

@dp.message(Command("summary_off", ignore_mention=True))
async def summary_off(message: Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(message):
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return
        
    await storage.set_summary_enabled(message.chat.id, False)
    await message.reply("–°–∞–º–º–∞—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ.")
    logger.info(f"–°–∞–º–º–∞—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ –≤ —á–∞—Ç–µ {message.chat.id} (thread_id={message.message_thread_id})")

@dp.message(Command("summary_now", ignore_mention=True))
async def summary_now(message: Message):
    logger.info("–•–µ–Ω–¥–ª–µ—Ä summary_now –≤—ã–∑–≤–∞–Ω")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await check_admin(message):
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.reply("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–∞–º–º–∞—Ä–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
        
    chat_id = message.chat.id
    user_id = message.from_user.id
    now = datetime.now(timezone.utc)
    yesterday = now - timedelta(days=1)
    since = (now - timedelta(hours=24)).isoformat()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    chat = await bot.get_chat(chat_id)
    is_forum = chat.is_forum
    selected_threads = await storage.get_selected_topics(chat_id)
    threads = selected_threads if selected_threads else await storage.get_threads(chat_id)
    topic_id = await storage.get_summary_topic(chat_id)

    if is_forum:
        if not topic_id:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –∫–∞–∂–¥—ã–π —Ç–æ–ø–∏–∫
            for thread_id in threads:
                if thread_id == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—â–∏–π —á–∞—Ç –¥–ª—è —Ñ–æ—Ä—É–º–æ–≤
                    continue
                thread_summaries = await summarize_threads(storage, chat_id, [thread_id])
                if thread_summaries and (thread_summaries.get("topics") or thread_summaries.get("links")):
                    summary_text = format_summary(thread_summaries, yesterday)
                    await bot.send_message(
                        chat_id,
                        summary_text,
                        message_thread_id=thread_id,
                        parse_mode="HTML"
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç–æ–ø–∏–∫–∞ {thread_id} –≤ —á–∞—Ç–µ {chat_id}")
                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    await processing_msg.delete()
        else:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ —Ç—É–¥–∞
            all_summaries = await summarize_threads(storage, chat_id, threads)
            if all_summaries and (all_summaries.get("topics") or all_summaries.get("links")):
                summary_text = format_summary(all_summaries, yesterday)
                await bot.send_message(
                    chat_id,
                    summary_text,
                    message_thread_id=topic_id,
                    parse_mode="HTML"
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –≤ —Ç–æ–ø–∏–∫ {topic_id} —á–∞—Ç–∞ {chat_id}")
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                await processing_msg.delete()
            else:
                # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
                await processing_msg.edit_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏.")
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–µ–ª–∞–µ–º –æ–¥–Ω–æ –æ–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏
        summaries = await summarize_threads(storage, chat_id, [0])  # –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
        if summaries and (summaries.get("topics") or summaries.get("links")):
            summary_text = format_summary(summaries, yesterday)
            send_kwargs = {"parse_mode": "HTML"}
            if topic_id and topic_id != 0:
                send_kwargs["message_thread_id"] = topic_id
            await bot.send_message(chat_id, summary_text, **send_kwargs)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∞–º–º–∞—Ä–∏ –≤ —á–∞—Ç {chat_id}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await processing_msg.delete()
        else:
            # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            await processing_msg.edit_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏.")

# --- –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∞–º–º–∞—Ä–∏ ---
async def periodic_summary():
    while True:
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—â–µ, —á—Ç–æ–±—ã —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        for chat_id in await storage.get_chats():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞
                if not await storage.get_summary_enabled(chat_id):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                interval = await storage.get_summary_interval(chat_id) or SUMMARY_INTERVAL_MINUTES
                last_time = await storage.get_last_summary_time(chat_id)
                last_time_dt = datetime.fromisoformat(last_time)
                if last_time_dt.tzinfo is None:
                    last_time_dt = last_time_dt.replace(tzinfo=timezone.utc)
                now = datetime.now(timezone.utc)
                yesterday = now - timedelta(days=1)
                if now < last_time_dt + timedelta(minutes=interval):
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat = await bot.get_chat(chat_id)
                is_forum = chat.is_forum
                threads = await storage.get_threads(chat_id)
                logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} (—Ç–æ–ø–∏–∫–∏: {threads})")

                if is_forum:
                    topic_id = await storage.get_summary_topic(chat_id)
                    if not topic_id:
                        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–º–∞—Ä–∏ –≤ –∫–∞–∂–¥—ã–π —Ç–æ–ø–∏–∫
                        for thread_id in threads:
                            if thread_id == 0:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—â–∏–π —á–∞—Ç –¥–ª—è —Ñ–æ—Ä—É–º–æ–≤
                                continue
                            thread_summaries = await summarize_threads(storage, chat_id, [thread_id])
                            if thread_summaries and (thread_summaries.get("topics") or thread_summaries.get("links")):
                                summary_text = format_summary(thread_summaries, yesterday)
                                await bot.send_message(
                                    chat_id,
                                    summary_text,
                                    message_thread_id=thread_id,
                                    parse_mode="HTML"
                                )
                                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ç–æ–ø–∏–∫–∞ {thread_id} –≤ —á–∞—Ç–µ {chat_id}")
                    else:
                        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–æ–ø–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ —Ç—É–¥–∞
                        all_summaries = await summarize_threads(storage, chat_id, threads)
                        if all_summaries and (all_summaries.get("topics") or all_summaries.get("links")):
                            summary_text = format_summary(all_summaries, yesterday)
                            await bot.send_message(
                                chat_id,
                                summary_text,
                                message_thread_id=topic_id,
                                parse_mode="HTML"
                            )
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—â–µ–µ —Å–∞–º–º–∞—Ä–∏ –≤ —Ç–æ–ø–∏–∫ {topic_id} —á–∞—Ç–∞ {chat_id}")
                await storage.update_last_summary_time(chat_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}")

def format_summary(summaries, date):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∞–º–º–∞—Ä–∏: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò, –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∏–º–∏—Ç Telegram), —Å —Ç–µ–≥–æ–º –∏ —Å—Å—ã–ª–∫–æ–π –≤ –∫–æ–Ω—Ü–µ"""
    text = summaries["topics"]
    link = os.getenv("DAILY_SUMMARY_LINK", "")
    if link and link.strip():
        tag_text = f"\n\n#dailysummary | <a href=\"{link}\">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–∞ –∫–æ—Ñ–µ</a>"
    else:
        tag_text = "\n\n#dailysummary"
    max_len = 4096 - len(tag_text)
    return text[:max_len] + tag_text

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è...")
    asyncio.create_task(periodic_summary())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())