import os
from openai import AsyncOpenAI
from dotenv import load_dotenv

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

def get_topic_emoji(topic):
    # –°–ª–æ–≤–∞—Ä—å —Ç–µ–º –∏ –∏—Ö —ç–º–æ–¥–∑–∏
    emoji_map = {
        "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞": "üíª",
        "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "üìä",
        "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "üîí",
        "–¥–æ—Å—Ç—É–ø": "üåê",
        "—Ñ–∏–Ω–∞–Ω—Å—ã": "üí∞",
        "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": "‚öôÔ∏è",
        "–Ω–∞–≥—Ä—É–∑–∫–∞": "‚öñÔ∏è",
        "–º—É–∑—ã–∫–∞": "üé∂",
        "–ø–∞—Ä–æ–ª—å": "üîë",
        "api": "üîß",
        "–±–æ—Ç": "ü§ñ",
        "default": "üìù"
    }
    
    for key, emoji in emoji_map.items():
        if key.lower() in topic.lower():
            return emoji
    return emoji_map["default"]

async def summarize_threads(storage, chat_id, threads, since_date=None):
    summaries = []
    links = []
    last_summary_time = since_date or await storage.get_last_summary_time(chat_id)

    for thread_id in threads:
        messages = await storage.get_messages_since(chat_id, thread_id, last_summary_time)
        if not messages:
            continue

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg in messages:
            text = msg.get('text', '')
            if text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                words = text.split()
                for word in words:
                    if word.startswith(('http://', 'https://', 't.me/')):
                        links.append(word)

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        def clean_text(text):
            # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML –Ω–∞ –∏—Ö —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
            return text.replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
            
        text_block = "\n".join([f"{m['user']}: {clean_text(m['text'])}" for m in messages])
        prompt = (
            "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
            "1. –û–ø—Ä–µ–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–µ–º—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è –æ–¥–Ω–∏–º –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (–¥–æ 6 —Å–ª–æ–≤)\n"
            "2. –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¢–ï–ú–ê\n\n"
            f"{text_block}"
        )

        response = await openai_client.chat.completions.create(
            model="gpt-4-turbo-preview",
            messages=[
                {"role": "system", "content": "–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ–±—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞. –°–¥–µ–ª–∞–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —á–∞—Ç–∞."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=100,
        )

        topic = clean_text(response.choices[0].message.content.strip())
        emoji = get_topic_emoji(topic)
        msg_count = len(messages)
        thread_url = f"https://t.me/c/{str(chat_id)[4:]}/{thread_id}" if thread_id else None

        summary_item = {
            "emoji": emoji,
            "topic": topic,
            "message_count": msg_count,
            "thread_id": thread_id,
            "url": thread_url
        }
        summaries.append(summary_item)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    summaries.sort(key=lambda x: x["message_count"], reverse=True)
    
    # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    clean_links = [clean_text(link) for link in set(links)]
    
    return {
        "topics": summaries,
        "links": clean_links  # –û—á–∏—â–µ–Ω–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    } 